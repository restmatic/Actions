/**
 * @file index
 * @author Jim Bulkowski <jim.b@paperelectron.com>
 * @project controllers
 * @license MIT {@link http://opensource.org/licenses/MIT}
 */
import {map, get, isFunction, reduce, fromPairs, toPairs} from 'lodash/fp'
import {CreatePlugin} from "@pomegranate/plugin-tools";
const tsGenerator = `// Generated by the Pomegranate cli on {{creationDate}}

// name: {{name}}

export const Actions = (PluginLogger) => {
  let names = []
  return {
    addName: (name) => {
      names.push(name)
    },
    getNames: () => {
      return names
    }
  }
}
`

export interface RestmaticActionController {

}

export interface RestmaticActionControllers {
  [key: string]: RestmaticActionController
}

export const Plugin = CreatePlugin('anything')
  .configuration({
    name: 'Actions',
    injectableParam: 'Actions',
    provides: ['@restmatic/Core'],
    optional: ['@restmatic/Controllers']
  })
  .variables({})
  .directories([{path: '.', prop: 'main'}])
  .hooks({
    load: async (Injector, PluginFiles, PluginLogger) => {
      PluginLogger.log('Creating Actions', 2)

      let files = await PluginFiles('main').fileList({ext: '.js'})
      let build = map((file) => {
        let required = require(file.path)
        let fileName = file.getBaseName()

        PluginLogger.log(`Creating Actions: ${fileName}.`)

        let mw = get('Actions', required)
        if (!mw) {
          throw new Error(`Actions file ${fileName} does not contain an export on the Actions property.`)
        }
        if (!isFunction(mw)) {
          throw new Error(`Actions file ${fileName} does not export an injectable function on the Actions property.`)
        }
        return [file.getBaseName(), Injector.inject(mw)]
      }, files)

      return reduce((acc, [name, obj]) => {
        acc[name] = obj
        return acc
      }, {}, build)

    }
  })
  .commands(function (PomConfig, PluginFiles, Handlebars) {
    return (yargs) => {
      return yargs
        .usage('usage: $0')
        .command({
          command: 'generate <name>',
          aliases: 'g',
          describe: `Generates Action file <name>`,
          builder: (yargs) => {
            return yargs
              .positional('name', {
                describe: 'The the filename to be created.',
                default: 'index',
                type: 'string'
              })
              .option('l', {
                alias: 'language',
                describe: 'Generate TypeScript or Javascript',
                default: 'ts',
                choices: ['ts'],
                type: 'string'
              })
              .option('force', {
                alias: 'f',
                default: false,
                describe: 'overwrites the specified file if it exists.',
                type: 'boolean'
              })
          },
          handler: async (argv) => {
            let Pf = PluginFiles('main')
            let file = `${argv.name}.${argv.language}`
            let exists = await Pf.projectFileExists(file)
            let compile = Handlebars.compile(tsGenerator)
            let compiled = compile({creationDate: new Date().toDateString(), name: argv.name})

            if (exists && !argv.force) {
              throw new Error(`${file} \n exists \n Rerun with --force to overwrite.`)
            }
            await Pf.outputProjectFile(file, compiled)
            console.log(`Created @restmatic/Actions Actions file ${file}`)
          }
        })
        .help()
    }
  })